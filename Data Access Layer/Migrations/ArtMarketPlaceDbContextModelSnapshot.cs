// <auto-generated />
using System;
using Data_Access_Layer.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Access_Layer.Migrations
{
    [DbContext(typeof(ArtMarketPlaceDbContext))]
    partial class ArtMarketPlaceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain_Layer.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Domain_Layer.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomizationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomizationId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Assiettes, bols ou tasses en céramiques.",
                            Name = "Poterie",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bijoux en or ou argent fait maison.",
                            Name = "Bijoux",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain_Layer.Entities.Customization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Customizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Couleur de votre choix.",
                            Name = "Couleur personnalisé",
                            Price = 5.9900000000000002,
                            ProductId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Taille de votre choix.",
                            Name = "Taille personnalisé",
                            Price = 10.0,
                            ProductId = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain_Layer.Entities.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("ArtisanResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("WantConsultation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Inquiry");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ShippingOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "4e0cc3da6c204423",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 4,
                            OrderDate = new DateTime(2025, 6, 8, 13, 41, 27, 63, DateTimeKind.Unspecified).AddTicks(3333),
                            ShippingOption = "FAST",
                            Status = "PENDING",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain_Layer.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsValidatedByArtisan")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsValidatedByArtisan = false,
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 1,
                            UnitPrice = 49.990000000000002
                        });
                });

            modelBuilder.Entity("Domain_Layer.Entities.OrderStatusPerArtisan", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ArtisanId");

                    b.HasIndex("ArtisanId");

                    b.ToTable("OrderStatusPerStatus");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ArtisanId = 5,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain_Layer.Entities.PaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("PaymentDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 49.990000000000002,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1,
                            PaymentDate = new DateTime(2025, 6, 8, 15, 41, 30, 605, DateTimeKind.Unspecified).AddTicks(2851),
                            PaymentMethod = "BANCONTACT",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain_Layer.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReservedStock")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Image")
                        .IsUnique();

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtisanId = 3,
                            Available = true,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bol en céramique solide",
                            Image = "46494bf1ef2343bcaf6ef3846296a4e5.jpg",
                            Name = "Bol en céramique",
                            Price = 19.989999999999998,
                            Reference = "PAPS-1-82BD9C",
                            ReservedStock = 0,
                            Stock = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ArtisanId = 3,
                            Available = true,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Assiette Creuse en céramique.",
                            Image = "aa1b85d03b774fb18d00ad1a7287f268.jpg",
                            Name = "Assiette Creuse",
                            Price = 10.0,
                            Reference = "PAPS-2-F8E0D5",
                            ReservedStock = 0,
                            Stock = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ArtisanId = 3,
                            Available = true,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Assiette en céramique.",
                            Image = "b2e82282131c46bb9f91dd22f078e6da.jpg",
                            Name = "Assiette",
                            Price = 15.0,
                            Reference = "PAPS-3-3B66A5",
                            ReservedStock = 0,
                            Stock = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ArtisanId = 5,
                            Available = true,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Collier celte de l'antiquité",
                            Image = "e875c773f7624e078a4258cf5c6ed26b.jpeg",
                            Name = "Collier celte",
                            Price = 49.990000000000002,
                            Reference = "ADAD-0-EFE65F",
                            ReservedStock = 0,
                            Stock = 9,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ArtisanId = 5,
                            Available = true,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Un beau bracelet de fleur en or.",
                            Image = "c74aa49fdeec41b69fe993de0fdfc46e.jpg",
                            Name = "Bracelet de Fleur",
                            Price = 15.0,
                            Reference = "ADAD-1-4110F7",
                            ReservedStock = 0,
                            Stock = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain_Layer.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtisanAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DeliveryPartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPartnerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Domain_Layer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CartId = 0,
                            CreatedAt = new DateTime(2025, 4, 19, 11, 41, 6, 663, DateTimeKind.Unspecified).AddTicks(3333),
                            Email = "admin@example.com",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "AC9126E7F5A5CF1564991D85C03CB1C2",
                            Role = "Admin",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CartId = 0,
                            CreatedAt = new DateTime(2025, 4, 19, 12, 31, 59, 846, DateTimeKind.Unspecified).AddTicks(6667),
                            Email = "jean@example.com",
                            FirstName = "Jean",
                            LastName = "Bon",
                            Password = "5FCF306D2BA332CDCC0EDE5C8158138D",
                            Role = "Customer",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Jean"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CartId = 0,
                            CreatedAt = new DateTime(2025, 5, 17, 23, 57, 57, 800, DateTimeKind.Unspecified),
                            Email = "julien.degol@gmail.com",
                            FirstName = "Julien",
                            LastName = "De Gaulle",
                            Password = "2562122D9A3F07BEB424CAE6CBB45ECE",
                            Role = "Customer",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Julien1"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CartId = 0,
                            CreatedAt = new DateTime(2025, 4, 19, 12, 36, 25, 36, DateTimeKind.Unspecified).AddTicks(6667),
                            Email = "paul@example.com",
                            FirstName = "Paul",
                            LastName = "Sevran",
                            Password = "33073B61D3610D08BBEF298767FE5572",
                            Role = "Artisan",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Paul"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CartId = 0,
                            CreatedAt = new DateTime(2025, 6, 8, 12, 52, 41, 333, DateTimeKind.Unspecified).AddTicks(3333),
                            Email = "a.dupont@gmail.com",
                            FirstName = "Adrien",
                            LastName = "Dupont",
                            Password = "FA6E8A721B9885D39DCC052976ED5CD8",
                            Role = "Artisan",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Adrien"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CartId = 0,
                            CreatedAt = new DateTime(2025, 6, 8, 13, 4, 56, 863, DateTimeKind.Unspecified).AddTicks(3333),
                            Email = "g.latour@gmail.com",
                            FirstName = "Gabin",
                            LastName = "Latour",
                            Password = "6314BAF29B5CCD2038277303DA8FE59B",
                            Role = "Delivery",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Gabin"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CartId = 0,
                            CreatedAt = new DateTime(2025, 4, 19, 12, 37, 19, 663, DateTimeKind.Unspecified).AddTicks(3333),
                            Email = "kevin@deliveryman.com",
                            FirstName = "Kevin",
                            LastName = "Statam",
                            Password = "125EA6D54A96CBFCF5144EE10A10F672",
                            Role = "Delivery",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Kevin"
                        });
                });

            modelBuilder.Entity("ProductShipment", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentsId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "ShipmentsId");

                    b.HasIndex("ShipmentsId");

                    b.ToTable("ProductShipment");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Cart", b =>
                {
                    b.HasOne("Domain_Layer.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Domain_Layer.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain_Layer.Entities.CartItem", b =>
                {
                    b.HasOne("Domain_Layer.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.Customization", "Customization")
                        .WithMany()
                        .HasForeignKey("CustomizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain_Layer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Customization");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Customization", b =>
                {
                    b.HasOne("Domain_Layer.Entities.Product", "Product")
                        .WithMany("Customizations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Inquiry", b =>
                {
                    b.HasOne("Domain_Layer.Entities.User", "Artisan")
                        .WithMany("InquiriesAsArtisan")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.User", "Customer")
                        .WithMany("InquiriesAsCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Order", b =>
                {
                    b.HasOne("Domain_Layer.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain_Layer.Entities.OrderProduct", b =>
                {
                    b.HasOne("Domain_Layer.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain_Layer.Entities.OrderStatusPerArtisan", b =>
                {
                    b.HasOne("Domain_Layer.Entities.User", "Artisan")
                        .WithMany("OrderStatusPerArtisans")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.Order", "Order")
                        .WithMany("OrderStatusPerArtisans")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain_Layer.Entities.PaymentDetail", b =>
                {
                    b.HasOne("Domain_Layer.Entities.Order", "Order")
                        .WithOne("PaymentDetail")
                        .HasForeignKey("Domain_Layer.Entities.PaymentDetail", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Product", b =>
                {
                    b.HasOne("Domain_Layer.Entities.User", "Artisan")
                        .WithMany("Products")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Review", b =>
                {
                    b.HasOne("Domain_Layer.Entities.User", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Shipment", b =>
                {
                    b.HasOne("Domain_Layer.Entities.User", "DeliveryPartner")
                        .WithMany("Shipments")
                        .HasForeignKey("DeliveryPartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryPartner");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain_Layer.Entities.User", b =>
                {
                    b.OwnsOne("Domain_Layer.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1,
                                    City = "AdminCity",
                                    Country = "AdminLand",
                                    PostalCode = "12345",
                                    Street = "123 Admin St"
                                },
                                new
                                {
                                    UserId = 2,
                                    City = "Paris",
                                    Country = "France",
                                    PostalCode = "7500",
                                    Street = "123 Rue de Paris"
                                },
                                new
                                {
                                    UserId = 3,
                                    City = "Lyon",
                                    Country = "France",
                                    PostalCode = "69000",
                                    Street = "456 Rue de Lyon"
                                },
                                new
                                {
                                    UserId = 4,
                                    City = "Paris",
                                    Country = "France",
                                    PostalCode = "10000",
                                    Street = "Rue des Combattants 14"
                                },
                                new
                                {
                                    UserId = 5,
                                    City = "Bordeaux",
                                    Country = "France",
                                    PostalCode = "25600",
                                    Street = "Rue des Potiers"
                                },
                                new
                                {
                                    UserId = 6,
                                    City = "Bordeaux",
                                    Country = "France",
                                    PostalCode = "23503",
                                    Street = "Rue des Livreurs"
                                },
                                new
                                {
                                    UserId = 7,
                                    City = "Marseille",
                                    Country = "France",
                                    PostalCode = "13000",
                                    Street = "789 Rue de Marseille"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductShipment", b =>
                {
                    b.HasOne("Domain_Layer.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain_Layer.Entities.Shipment", null)
                        .WithMany()
                        .HasForeignKey("ShipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain_Layer.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderStatusPerArtisans");

                    b.Navigation("PaymentDetail");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Domain_Layer.Entities.Product", b =>
                {
                    b.Navigation("Customizations");

                    b.Navigation("OrderProducts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain_Layer.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("InquiriesAsArtisan");

                    b.Navigation("InquiriesAsCustomer");

                    b.Navigation("OrderStatusPerArtisans");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Reviews");

                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
